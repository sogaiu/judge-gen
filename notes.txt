# LIMITS:
#
# * doesn't handle code that is not "well-formed"
#
# * likely only works with utf-8
#
# * doesn't clean up temporary files and directories
#
# * doesn't handle edge case of two comments lines in a row that
#   look like expected value lines

# POSSIBILITIES:
#
# * single-file version for ease of installation?
#   * move all relevant files to a single directory
#   * rename all definitions to have an appropriate prefix (e.g. path/ for
#     things in path.janet)
#   * change all import forms to use :prefix ""
#   * test whether program still runs
#   * identify order for things to be concatenated (depth first search
#     starting at a particular file and visiting import forms)
#     * jg-jpm-test
#       * path
#       * jg-runner
#         * utils
#         * jg
#           * args
#             * argparse
#           * input
#           * rewrite
#             * pegs
#               * grammar
#           * segments
#             * pegs
#               * grammar
#         * args-runner
#           * argparse
#         * jpm
#         * path
#       * config
#     * order of concatenation is thus:
#       * config
#       * path
#       * jpm
#       * argparse
#       * args-runner
#       * grammar
#       * pegs
#       * segments
#       * rewrite
#       * input
#       * args
#       * jg
#       * utils
#       * jg-runner
#       * jg-jpm-test
#   * concatenate files in order
#   * remove import forms
#
# * _verify/dump-results uses "%p" in a branch.  could that be a problem
#   in some cases?
#
# * downside of using `(deep= A B)` with expected value of true is
#   when the test fails, there's not a whole lot of useful information
#   apart from the failure.  is this just a trade-off that has to be
#   made with the current approach?
#
# * could have option to send code to janet -k before main jg processing.
#   atm, `janet -k` doesn't appear to work for files that have
#   `(import ...)` in them, so this may not be an option.
#
# * consider various "rewriting" targets, e.g. testament, helper.janet
#   for "transition" purposes
#
# * in handle_one, instead of `(break false)`, perhaps different
#   values could be returned to indicate different types of errors
#
# * consider different reporting modes for jg.  concrete examples:
#
#   * for earliest / quickest feedback, have _verify output info as soon
#     as it is available
#
#   * for slower feedback, have _verify just pass back all test
#     results at the end when they are all ready
#
#   different receivers might be set up for handling test results, but
#   this may be getting too elaborate at this stage :)
#
# * produce code with comment blocks unwrapped inline -- test context is
#   is more likely to be correct than just appending tests after original
#   code
#
# * would using recent janet-peg for parsing as well as rewriting
#   source be any better than the current approach?
#   * possibly easier to transform and output?
#   * possibly easier to determine line / column info for tests?
#   * examine alc.x-as-tests for hints

# ISSUES:
#
# * how to handle rather large return values -- load from external file?
#
# * how / whether to try to test output (such as from `print`) -- see
#   spork's `capture-stdout` for an idea
#
# * consider using :s instead of :ws in pegs, also in janet-peg-grammar

# QUESTIONS:
#
# * where to document usage of temporary directory to store test results and
#   output?
#
# * how to get the equivalent of `/tmp` on windows for the purpose of
#   creating a temporary directory to store test results and output?
#
# * provide a mode to work on stuff outside a comment block?
#
#   so for example the following at the top-level:
#
#     (def a 1)
#     # => 1
#
#   ought to work?
