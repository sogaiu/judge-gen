# LIMITS:
#
# * tends to work for direct subdirectories of the project directory.
#   files can be in deeper directories, but for least hassle, point
#   configuration information at direct subdirectories of project
#   directory.
#
# * doesn't handle code that is not "well-formed"
#
# * doesn't clean up temporary files and directories automatically
#
# * doesn't handle edge case of two comments lines in a row that
#   look like expected value lines
#
# * updating an existing judge-gen installation has the downside of
#   potentially erasing previous configuration information.
#
# * likely only works with utf-8

# POSSIBILITIES:
#
# * find parts that don't work on windows and try to fix
#   * jg-runner/judge - temp directory
#   * construction of command line is incorrect (cf. quoting with dofile?)
#   * line endings for files in cloned repository have an impact on whether
#     tests pass
#
# * audit code for use of stdout vs stderr - likely not consistent
#
# * jg-runner/handle one needs to handle failures of things like fileystem
#   operations
#
# * possible to lint / check for well-formedness of code before
#   trying to convert to tests?
#   * possible to check as part of executing jg/handle-one
#
# * each runner in test should have a unique name that can be used
#   to look up configuration info in jg.jdn.  if there is no jg.jdn, then
#   the name of the file specifies a subdirectory of the project directory.
#
# * consider having test/judge-gen.janet read configuration information
#   from a separate file.
#   * current method risks losing configuration information upon upgrade
#   * current method leads to likelihood of having to edit
#     test/judge-gen.janet on each upgrade (tedious and error-prone?)
#   * current method risks breaking test/judge-gen.janet because a user
#     typically has to edit it at least once
#
# * can use one judge-gen.janet per directory of source files, but that
#   would lead to multiple judge-gen.janet files.  perhaps an alternative
#   to have a single configuration file that could "drive" judge-gen.janet
#   to be used for multple directories.  need to consider multiple
#   judge directories to prevent collisions?
#
# * if the config file route is taken, ensure it is optional.  i.e. make
#   sure that judge-gen.janet can operate without the config file.
#
# * consider if there is any benefit in allowing some control over
#   test file execution order, e.g.
#   * sort by name
#   * sort by other criteria
#   * random
#   * custom order
#
# * _verify/dump-results uses "%p" in a branch.  could that be a problem
#   in some cases?
#
# * downside of using `(deep= A B)` with expected value of true is
#   when the test fails, there's not a whole lot of useful information
#   apart from the failure.  is this just a trade-off that has to be
#   made with the current approach?  there is a way to write things
#   that avoids this, but that method requires writing a `def` before
#   the expression to be evaluated and then using the name of the
#   `def` as the expected value.
#
# * consider various "rewriting" targets, e.g. testament, helper.janet
#   for "transition" purposes
#
# * in handle_one, instead of `(break false)`, perhaps different
#   values could be returned to indicate different types of errors
#
# * consider different reporting modes for jg.  concrete examples:
#
#   * for earliest / quickest feedback, have _verify output info as soon
#     as it is available
#
#   * for slower feedback, have _verify just pass back all test
#     results at the end when they are all ready
#
#   different receivers might be set up for handling test results, but
#   this may be getting too elaborate at this stage :)
#
# * produce code with comment blocks unwrapped inline -- test context is
#   is more likely to be correct than just appending tests after original
#   code
#
# * would using recent janet-peg for parsing as well as rewriting
#   source be any better than the current approach?
#   * possibly easier to transform and output?
#   * possibly easier to determine line / column info for tests?
#   * examine alc.x-as-tests for hints

# ISSUES:
#
# * how to handle rather large return values -- load from external file?
#
# * how / whether to try to test output (such as from `print`) -- see
#   spork's `capture-stdout` for an idea
#
# * consider using :s instead of :ws in pegs, also in janet-peg-grammar

# QUESTIONS:
#
# * where to document usage of temporary directory to store test results and
#   output?
#
# * how to get the equivalent of `/tmp` on windows for the purpose of
#   creating a temporary directory to store test results and output?
#
# * provide a mode to work on stuff outside a comment block?
#
#   so for example the following at the top-level:
#
#     (def a 1)
#     # => 1
#
#   ought to work?
