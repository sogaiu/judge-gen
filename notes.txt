# LIMITS:
#
# * tends to work for direct subdirectories of the project directory.
#   files can be in deeper directories, but for least hassle, point
#   configuration information at direct subdirectories of project
#   directory.  see details below for more in-depth explanation.
#
# * doesn't clean up temporary files and directories automatically, though
#   running a subsequent set of tests will erase old results and generated
#   tests
#
# * updating an existing judge-gen installation has the downside of
#   potentially erasing previous configuration information because this
#   mostly lives in the runner file itself (with the exception of the
#   name of the file which is used as configuration information)
#
# * likely only works with utf-8

# POSSIBILITIES:
#
# * try to "finish" judge-gen and not add anything as much as possible
#   * report error when transformation fails and suggest checking that
#     program executes
#   * also seriously consider some config file / directory
#   * be able to launch in debug mode (via `:args`) for additional output?
#   * consider an extension mechanism -- possibly a different project.
#     possibly the extensions are only run via direct execution of
#     the runner: `janet test/runner.janet --extension` (cf. `(dyn :args)`)
#     * through extensions may be linting source files might be done
#     * through extensions may be a diagnostic mode might be done to
#       check sanity of configuration
#     * through extensions trying to run all test files to determine
#       every file that leads to failure (cf. `jpm test` fail early
#       behavior gives an incomplete picture)
#     * through extensions, customizing reporting might be implemented
#     * a mode of operation to work on stuff outside a comment block?
#
#       so for example the following at the top-level:
#
#         (def a 1)
#         # => 1
#
#      ought to work as input to jg's transformation process.
#    * a mode of operation to apply runner to a single file
#
# * consider idea of the "judge" directory being ".judge_<name-of-config>"
#   * easier to have multiple "installations" of judge-gen in a single
#     project?
#   * not quite safe as `test/dir-a/config.janet` and
#     `test/dir-b/config.janet` end up with the same <name-of-config>
#     * may be acceptable trade-off?
#     * have runner check for this condition before starting to process
#       tests?  if detected, just exit?
#
# * consider what might be done to improve error handling and messages
#   * track and log actual instances
#   * in jg/handle_one, instead of `(break false)`, perhaps different
#     values could be returned to indicate different types of errors
#
# * document the limitation about direct subdirectories of the project
#   directory and the "why".  a direct subdirectory of the project directory
#   has at least the following important properties:
#   * copying the content (contained files and directories) to a sibling
#     directory (one that is also a direct subdirectory of the
#     project directory) doesn't adversely affect most likely (tm)
#     paths in import forms.  at least so far, the probability of
#     the imports still working after copying seems pretty high.
#     one pathological case is an import with the path of the form
#     "../name-a/name-b", where the import is in a file which lives in
#     a directory with name "name-a".  things like this are likely to
#     not work with judge-gen's copying scheme.  it seems unlikely to
#     be a problem though because why wouldn't one express the path
#     like "./name-b" instead?
#   * copying the content (contained files and directories) to a sibling
#     directory also doesn't "leave behind" files and directories that might
#     be necessary for imports to work correctly.  if a non-direct
#     subdirectory of the project directory is specified, there is a chance
#     its content will refer to a sibling's content (which would also be a
#     non-direct subdirectory of the project directory), and judge-gen's
#     copying scheme would fail for this case.
#   if these two points are not issues for one's use case, it may be
#   that one can use a non-direct subdirectory of the project directory
#   (i.e. a "deeper" subdirectory) in the configuration of judge-gen.
#
# * document potential issues with using multiple runners
#   * likely less problematic to use separate judge roots -- use different
#     values for judge-dir-name
#   * pay attention to silence-jpm-test value -- if even one is true,
#     there might be problems of other runners not running
#   * reminder that things may work better if each src-dir-name
#     refers to a direct subdirectory of project directory
#
# * possibly provide some linting / diagnostic mode to check configuration
#   and file / directory structure.  collect gotchas, issues, etc. together
#   for consideration of potential things to check for.
#
# * audit / review code for:
#   * use of stdout vs stderr (e.g. prin* vs eprin*)
#   * prefer break over assert in many places?
#   * break without argument
#
# * _verify/dump-results uses "%p" in a branch.  determine if this could
#   be a problem but also whether this branch is ever used.
#
# * consider using :s instead of :ws in pegs, also in janet-peg-grammar
#
# * consider various "rewriting" targets, e.g. testament, helper.janet
#   for "transition" / exporting purposes
#
# * downside of using `(deep= A B)` with expected value of true is
#   when the test fails, there's not a whole lot of useful information
#   apart from the failure.  is this just a trade-off that has to be
#   made with the current approach?  there is a way to write things
#   that avoids this, but that method requires writing a `def` before
#   the expression to be evaluated and then using the name of the
#   `def` as the expected value.
#
# * consider if there is any benefit in allowing some control over
#   test file execution order, e.g.
#   * sort by name
#   * sort by other criteria
#   * random
#   * custom order
#
# * consider reporting number of tests per file
#
# * consider different reporting modes for jg.  concrete examples:
#
#   * for earliest / quickest feedback, have _verify output info as soon
#     as it is available
#
#   * for slower feedback, have _verify just pass back all test
#     results at the end when they are all ready
#
#   different receivers might be set up for handling test results, but
#   this may be getting too elaborate at this stage :)
#
# * produce code with comment blocks unwrapped inline -- test context is
#   is more likely to be correct than just appending tests after original
#   code
#
# * would using recent janet-peg for parsing as well as rewriting
#   source be any better than the current approach?
#   * possibly easier to transform and output?
#   * possibly easier to determine line / column info for tests?
#   * examine alc.x-as-tests for hints
#
# * preparing the individual source files so that they could be concatenated
#   together in a relatively problem-free manner involved a lot of
#   rewriting source.  could this be avoided / reduced somehow?
#   * is `:export true` somehow applicable here?
#   * analyzing imports and doing some identifier rewriting seems
#     like it could help a fair bit, but that would probably not been
#     enough for path.janet
#
# * configuration ideas
#   * don't make a configuration file for the moment, try to collect
#     usage scenarios, then revisit.
#   * currently, using the name of the runner as a way to indicate which
#     direct subdirectory of the project directory to use as a source of
#     tests.  this can be overriden via configuration in the runner.
#     * still it should be possible to finely configure the runner based
#       on values in the runner (e.g. judge-root)
#     * can put runner in a subdirectory of test if there are name
#       collision issues
#   * motivation for configuration via external file
#     * current method risks losing configuration information upon upgrade
#     * current method leads to likelihood of having to edit
#       test/judge-gen.janet on each upgrade (tedious and error-prone?)
#     * current method risks breaking test/judge-gen.janet because a user
#       typically has to edit it at least once
#   * each runner in test should have a unique name that can be used
#     to look up configuration info in jg.jdn.  if there is no jg.jdn, then
#     the name of the file specifies a subdirectory of the project directory.
#     this last bit helps make it possible for the config file is optional
#     for some cases.
#   * can use one judge-gen.janet per directory of source files, but that
#     would lead to multiple judge-gen.janet files.  perhaps an alternative
#     is to have a single configuration file that could "drive" judge-gen.janet
#     to be used for multple directories.  need to consider multiple
#     judge directories to prevent collisions?
#   * location of config file
#     * project root - e.g. `jg.jdn`
#     * directory with runner - e.g. `test/jg.jdn`, `test/fun/jg.jdn`
#     * could do some kind of search order - e.g. runner dir first, up, etc.

# ISSUES:
#
# * how / whether to handle rather large return values -- load from external
#   file?
#
# * how / whether to try to test output (such as from `print`) -- see
#   spork's `capture-stdout` for an idea
#
# * some existing repositories use an older version of judge-gen, enumerate
#   these and consider migration to newer version.  some things that might
#   need to be done:
#   * count number of tests using old version of judge-gen
#   * ensure tests only use simplified syntax
#   * compare number of tests between old and new versions
#   * edit project.janet to remove stale phony targets
#   * add runner to test directory
#
# * the structure and content of the .judge directory is not spelled out so
#   well.  consider remedying.
#   * timing of creation
#   * content
#     * test files
#     * source files
#     * test results (report + stdout output)
